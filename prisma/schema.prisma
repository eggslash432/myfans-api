generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===== Enums =====
 */
enum Role {
  fan
  creator
  admin
}

enum KycStatus {
  pending
  approved
  rejected
}

enum SubStatus {
  active
  past_due
  canceled
  incomplete
  trialing
}

enum Visibility {
  free
  plan
  paid_single
}

enum MediaType {
  image
  video
  audio
}

enum PaymentKind {
  subscription
  one_time
}

enum PaymentStatus {
  paid
  refunded
  failed
  pending
}

enum PayoutStatus {
  requested
  approved
  paid
  rejected
}

/**
 * ===== Core Users =====
 */
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  passwordHash    String
  role            Role
  isActive        Boolean   @default(true)
  emailVerifiedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  profile        Profile?
  creator        Creator?
  kycSubmissions KycSubmission[]
  subscriptions  Subscription[]
  favorites      Favorite[]
  payments       Payment[]

  @@index([role])
  @@index([isActive])
}

model Profile {
  userId      String   @id
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName String
  avatarUrl   String?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/**
 * ===== Creator & KYC =====
 */
model Creator {
  userId      String   @id
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  publicName  String
  bankAccount Json?
  isListed    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  plans    Plan[]
  posts    Post[]
  payouts  Payout[]
  Favorite Favorite[]
  Payment  Payment[]

  @@index([isListed])
}

model KycSubmission {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  status     KycStatus
  documents  Json
  reviewedBy Int?
  reviewedAt DateTime?
  note       String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@index([status, createdAt])
}

/**
 * ===== Plans & Subscriptions =====
 */
model Plan {
  id              String   @id @default(uuid())
  creator         Creator  @relation(fields: [creatorId], references: [userId], onDelete: Cascade)
  creatorId       String
  name            String
  priceJpy        Int
  description     String?
  isActive        Boolean  @default(true)
  externalPriceId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  subscriptions Subscription[]
  posts         Post[]
  Payment       Payment[]

  @@index([creatorId])
  @@index([isActive, creatorId])
}

model WebhookLog {
  id        String   @id        
  type      String
  createdAt DateTime @default(now())
}

model Subscription {
  id                 String    @id @default(uuid())
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  plan               Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId             String
  status             SubStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean   @default(false)
  externalSubId      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([userId, planId])
  @@index([status])
  @@index([currentPeriodEnd])
}

/**
 * ===== Posts =====
 */
model Post {
  id          String     @id @default(uuid())
  creator     Creator    @relation(fields: [creatorId], references: [userId], onDelete: Cascade)
  creatorId   String
  title       String
  bodyMd      String?
  visibility  Visibility
  plan        Plan?      @relation(fields: [planId], references: [id])
  planId      String?
  isPublished Boolean    @default(false)
  publishedAt DateTime?
  priceJpy    Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  media   PostMedia[]
  Payment Payment[]

  @@index([creatorId, isPublished])
  @@index([visibility, planId])
  @@index([publishedAt])
}

model PostMedia {
  id        String    @id @default(uuid())
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  mediaType MediaType
  url       String
  sortOrder Int       @default(0)

  @@index([postId])
}

/**
 * ===== Social =====
 */
model Favorite {
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  creator       Creator  @relation(fields: [creatorId], references: [userId], onDelete: Cascade)
  creatorId     String
  notifyEnabled Boolean  @default(true)
  createdAt     DateTime @default(now())

  @@id([userId, creatorId])
}

/**
 * ===== Payments & Operational =====
 */
model Payment {
  id           String        @id @default(uuid())
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?
  creator      Creator?      @relation(fields: [creatorId], references: [userId])
  creatorId    String?
  plan         Plan?         @relation(fields: [planId], references: [id])
  planId       String?
  post         Post?         @relation(fields: [postId], references: [id])
  postId       String?
  amountJpy    Int
  kind         PaymentKind
  externalTxId String?       @unique
  status       PaymentStatus
  paidAt       DateTime?
  createdAt    DateTime      @default(now())

  @@index([status, createdAt])
  @@index([creatorId])
  @@index([planId])
  @@index([postId])
}

model Payout {
  id          String       @id @default(uuid())
  creator     Creator      @relation(fields: [creatorId], references: [userId], onDelete: Cascade)
  creatorId   String
  amountJpy   Int
  status      PayoutStatus
  requestedAt DateTime     @default(now())
  paidAt      DateTime?
  note        String?

  @@index([creatorId, status])
}

model WebhookEvent {
  id             String    @id @default(uuid())
  provider       String
  eventType      String
  idempotencyKey String?   @unique
  payload        Json
  processed      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  processedAt    DateTime?

  @@index([provider, eventType, createdAt])
}
